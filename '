{-# LANGUAGE DeriveDataTypeable, ScopedTypeVariables #-}

-- | Monotone hash based index.
module Indexing (pad, openIndex, closeIndex, Index, IndexingError(..), index, lookUp) where

import System.Random
import Control.Monad.Random
import System.IO
import Control.Exception
import Control.Monad
import Data.Array hiding (index)
import Data.Int
import Data.Bits
import Data.Char
import Data.List
import Data.Typeable
import Data.ByteString.Char8 (unpack, hGet)
import Foreign.Storable
import Foreign.Marshal.Alloc
import Foreign.Marshal.Utils
import Prelude hiding (catch)

pad _ 0 ls = ls
pad with n [] = replicate n with
pad with n (x:xs) = x : pad with (n - 1) xs

windows sz ls = pad '\0' sz (take sz ls) : if null dr then [] else windows dr where
	dr = drop 5 ls

bits :: Array Int Int
bits = listArray (0, 256 * 10 - 1) $ evalRand (mapM (\_ -> getRandomR (0, 15)) [0..256 * 10 - 1]) (mkStdGen 0)

hashByte (hash, i) x = (if x == '\0' then
		hash
	else
		setBit hash (bits ! (256 * i + ord x)),
	i + 1)

hashWindow :: String -> Int32
hashWindow = fst . foldl hashByte (0, 0)

nBits x = sum $ map ((.&. 1) . shiftR x) [0..15]

-- Put the bits in x in the 1 positions in mask
interlace mask x = if x == 0 || mask == 0 then
		0
	else if testBit mask 0 then
		(x .&. 1) .|. shiftL (interlace (shiftR mask 1) (shiftR x 1)) 1
	else
		shiftL (interlace (shiftR mask 1) x) 1

compatiblePlaces1 window = map ((.|. hash) . interlace bits) [0..nBits bits - 1] where
	hash = hashWindow window
	bits = (2 ^ 16 - 1) .&. complement hash

compatiblePlaces window = concat $ zipWith (\n -> map ((,) n) . compatiblePlaces1 . take 10 . (++window)) [4,3..0] (tails (replicate 4 '\0'))

superblockSize :: Int32
superblockSize = 2 ^ 20 * 32

openIndex path = do
	hdl <- openBinaryFile path ReadWriteMode
	sz <- hFileSize hdl
	hSetFileSize hdl (sz `max` toInteger (superblockSize + 128)) -- 32 mebibytes + dummy entry
	return (Index hdl)

closeIndex (Index hdl) = hClose hdl

newtype Index = Index Handle deriving Eq

data IndexingError = OutOfRoom -- there is no space for a new entry
	| PathTooLong -- a path was too long
	| ResourceError -- an internal error occurred
	| TryAgain deriving (Show, Typeable) -- the database is in use; try again later

instance Exception IndexingError

hGetInt32 :: Handle -> IO Int32
hGetInt32 hdl = do
	p <- new 0
	finally
		(do { hGetBuf hdl p 4; peek p })
		(free p)

hPutInt32 :: Handle -> Int32 -> IO ()
hPutInt32 hdl x = do
	p <- new 0
	finally
		(do { poke p x; hPutBuf hdl p 4 })
		(free p)

seekForWindow hdl loc place = hSeek hdl AbsoluteSeek (toInteger $ 2 ^ 9 * loc + 8 * place)

printable x = ord x >= 32 && ord x <= 255 || ord x == 10 || ord x == 13

interesting = any (`notElem` "\t\n\r ")

index :: Index -> FilePath -> String -> IO ()
index (Index idx) path contents = do
	-- Check path length
	when (length path > 128) $ throwIO PathTooLong

	catch (do
		-- Add the path to the path array
		hSeek idx SeekFromEnd 0
		pathI <- liftM ((`quot` 128) . subtract superblockSize . fromInteger) (hTell idx)
		hPutStr idx (pad '\0' 128 path)

		-- Index the file
		mapM_ (\(i, window) -> when (interesting window) $ do
			-- Seek to the point in the file where the window should go
			seekForWindow idx (hashWindow window) 0

			-- Search for a place
			foldr (\_ next -> do
				pathI1 <- hGetInt32 idx
				if pathI1 == pathI then
						-- Alter the entry to indicate full search needed
						hPutInt32 idx (-1)
					else if pathI1 == 0 then do
						hSeek idx RelativeSeek (-4)
						hPutInt32 idx pathI
						hPutInt32 idx i
					else do
						hGetInt32 idx
						next)
				(throwIO OutOfRoom)
				[0..2 ^ 6 - 1])
			$ zip [0,5..] (windows 10 $ map toUpper $ takeWhile printable contents))
		(\(_ :: IOError) -> throwIO ResourceError)

lookUp :: Index -> Bool -> String -> IO [FilePath]
lookUp (Index hdl) caseSensitive string = catch
	(do
	let string1 = (if caseSensitive then id else map toUpper) string
	buf <- mallocBytes 128
	finally
		-- Inspect each file at the stated position for the string
		(liftM (nub . concat) $ mapM (\(offset, i) ->
			foldr (\j next -> do
			-- Seek to the window position
			seekForWindow hdl i j

			pathI <- hGetInt32 hdl
			k <- hGetInt32 hdl

			-- Get the path
			hSeek hdl AbsoluteSeek (toInteger $ superblockSize + 128 * pathI)
			path <- liftM (reverse . dropWhile (=='\0') . reverse . unpack) $ hGet hdl 128

			-- Check if the string is at the stated position
			if pathI == 0 then
					return []
				else
				liftM2 (++) (catch
				(do
					inxd <- openBinaryFile path ReadMode
					finally (if k == -1 then do
							contents <- hGetContents inxd
							return $! if string1 `elem` ((if caseSensitive then id else map (map toUpper)) $ windows (length string1) $ drop offset contents) then [path] else []
						else do
							hSeek inxd AbsoluteSeek (toInteger k + toInteger offset)
							liftM (\s -> if string1 == (if caseSensitive then id else map toUpper) (unpack s) then [path] else []) $ hGet inxd (length string1))
							(hClose inxd))
				(\(_ :: IOError) -> return []))
				next)
			(return [])
			[0..2 ^ 6 - 1])
			$ compatiblePlaces string1)
		(free buf))
	(\(_ :: IOError) -> throwIO ResourceError)
